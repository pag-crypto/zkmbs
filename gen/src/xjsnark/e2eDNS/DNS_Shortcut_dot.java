package xjsnark.e2eDNS;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.config.Config;
import backend.eval.SampleRun;
import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.FieldElement;
import util.Util;
import xjsnark.tls13_key_schedules.TLSKeySchedule;
import xjsnark.membership_merkle.non_membership;
import backend.eval.CircuitEvaluator;

public class DNS_Shortcut_dot extends CircuitGenerator {



  public static void main(String[] args) {
    Config.multivariateExpressionMinimization = false;
    Config.writeCircuits = true;
    Config.outputFilesPath = ".";

    new DNS_Shortcut_dot();
  }

  public DNS_Shortcut_dot() {
    super("DNS_Shortcut_dot");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {



        // **************** Channel Opening Inputs ***************************************** 

        try {
          BufferedReader br = new BufferedReader(new FileReader(channel_test_file_name));

          String psk_line = br.readLine();
          String sk_line = br.readLine();
          String Ax_line = br.readLine();
          String Ay_line = br.readLine();
          String Bx_line = br.readLine();
          String By_line = br.readLine();
          String HS_line = br.readLine();

          String H2_line = br.readLine();
          String H7_line = br.readLine();
          String H3_line = br.readLine();

          String SF_line = br.readLine();

          String pt2_line = br.readLine();
          String ct3_line = br.readLine();

          String dns_ct_line = br.readLine();

          String H_state_tr7_line = br.readLine();


          for (int i = 0; i < HS_line.length() / 2; i = i + 1) {
            HS[i].mapValue(new BigInteger(HS_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < H2_line.length() / 2; i = i + 1) {
            H2[i].mapValue(new BigInteger(H2_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }


          CH_SH_len.mapValue(BigInteger.valueOf(pt2_line.length() / 2), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());


          ServExt_len.mapValue(BigInteger.valueOf((ct3_line.length() / 2)), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          // Compute the tail 
          // This is used for efficient SHA computation 
          String ct3_tail_str = get_tail_minus_36(pt2_line + ct3_line);

          for (int i = 0; i < ct3_tail_str.length() / 2; i = i + 1) {
            ServExt_tail_ct[i].mapValue(new BigInteger(ct3_tail_str.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          ServExt_tail_len.mapValue(BigInteger.valueOf(ct3_tail_str.length() / 2), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          for (int i = ct3_tail_str.length() / 2; i < 128; i = i + 1) {
            ServExt_tail_ct[i].mapValue(new BigInteger("0"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          // read the H_state 
          for (int i = 0; i < H_state_tr7_line.length() / 2; i = i + 1) {
            SHA_H_Checkpoint[i].mapValue(new BigInteger(H_state_tr7_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < dns_ct_line.length() / 2; i = i + 1) {
            dns_ct[i].mapValue(new BigInteger(dns_ct_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }
          for (int i = dns_ct_line.length() / 2; i < MAX_DNS_CT_LEN; i = i + 1) {
            dns_ct[i].mapValue(new BigInteger("0"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }


        } catch (Exception ex) {
          System.out.println("FILE NOT FIND OR LINE NOT READ");
        }


        // *************************** Read inputs for Membership Testing ********************* 

        String line;
        try {
          BufferedReader br = new BufferedReader(new FileReader(membership_test_file_name));

          // there are 14 data points in the text file, only some of which are used in this circuit 
          for (int i = 0; i < 255; i++) {
            line = br.readLine();
          }

          line = br.readLine();
          root.mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          for (int i = 0; i < 255; i++) {
            line = br.readLine();
            left_domain_name[i].mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < 255; i++) {
            line = br.readLine();
            right_domain_name[i].mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          // path of left and right, it's F_p[HEIGHT] elements storing the hashes in the path 
          for (int i = 0; i < HEIGHT; i++) {
            line = br.readLine();
            left_path_array[i].mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }
          for (int i = 0; i < HEIGHT; i++) {
            line = br.readLine();
            right_path_array[i].mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          line = br.readLine();
          left_dir.mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          line = br.readLine();
          right_dir.mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());


          line = br.readLine();
          left_index.mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());


          line = br.readLine();
          right_index.mapValue(new BigInteger(line, 10), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());


        } catch (Exception ex) {
          System.out.println("FILE NOT FIND OR LINE NOT READ");
        }



      }
      public void post() {
        System.out.println("Circuit Output: ");

        for (int j = 0; j < values.length; j++) {
          for (int i = 0; i < values[j].length; i++) {
            System.out.print(String.format("%1$02x", values[j][i].getValueFromEvaluator(CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator())));
          }
          System.out.print("\n");
        }
      }

    });

  }



  public void __init() {
    channel_test_file_name = "test.txt";
    membership_test_file_name = "test_wildcard.txt";
    HEIGHT = 21;
    HS = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    SHA_H_Checkpoint = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    H2 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    CH_SH_len = new UnsignedInteger(16, new BigInteger("0"));
    ServExt_len = new UnsignedInteger(16, new BigInteger("0"));
    ServExt_tail_ct = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{128}, 8);
    ServExt_tail_len = new UnsignedInteger(8, new BigInteger("0"));
    dns_ct = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{MAX_DNS_CT_LEN}, 8);
    root = new FieldElement(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), new BigInteger("0"));
    left_domain_name = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{255}, 8);
    right_domain_name = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{255}, 8);
    left_path_array = (FieldElement[]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{HEIGHT}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    right_path_array = (FieldElement[]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{HEIGHT}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    left_dir = new UnsignedInteger(64, new BigInteger("0"));
    right_dir = new UnsignedInteger(64, new BigInteger("0"));
    left_index = new UnsignedInteger(8, new BigInteger("0"));
    right_index = new UnsignedInteger(8, new BigInteger("0"));
  }

  public String channel_test_file_name;
  public String membership_test_file_name;
  public int HEIGHT;
  public UnsignedInteger[] HS;
  public UnsignedInteger[] SHA_H_Checkpoint;
  public UnsignedInteger[] H2;
  public UnsignedInteger CH_SH_len;
  public UnsignedInteger ServExt_len;
  public UnsignedInteger[] ServExt_tail_ct;
  public UnsignedInteger ServExt_tail_len;
  public UnsignedInteger[] dns_ct;
  public FieldElement root;
  public UnsignedInteger[] left_domain_name;
  public UnsignedInteger[] right_domain_name;
  public FieldElement[] left_path_array;
  public FieldElement[] right_path_array;
  public UnsignedInteger left_dir;
  public UnsignedInteger right_dir;
  public UnsignedInteger left_index;
  public UnsignedInteger right_index;
  public UnsignedInteger[][] values;

  public static final int MAX_DNS_CT_LEN = 255;
  @Override
  public void __defineInputs() {
    super.__defineInputs();
    CH_SH_len = UnsignedInteger.createInput(this, 16);
    ServExt_len = UnsignedInteger.createInput(this, 16);
    ServExt_tail_len = UnsignedInteger.createInput(this, 8);
    root = FieldElement.createInput(this, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));



    H2 = (UnsignedInteger[]) UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(H2), 8);
    ServExt_tail_ct = (UnsignedInteger[]) UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(ServExt_tail_ct), 8);












  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();









  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();

    left_dir = UnsignedInteger.createVerifiedWitness(this, 64);
    right_dir = UnsignedInteger.createVerifiedWitness(this, 64);
    left_index = UnsignedInteger.createVerifiedWitness(this, 8);
    right_index = UnsignedInteger.createVerifiedWitness(this, 8);



    HS = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(HS), 8);
    SHA_H_Checkpoint = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(SHA_H_Checkpoint), 8);
    dns_ct = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(dns_ct), 8);
    left_domain_name = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(left_domain_name), 8);
    right_domain_name = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(right_domain_name), 8);

    left_path_array = (FieldElement[]) FieldElement.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(left_path_array), new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    right_path_array = (FieldElement[]) FieldElement.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(right_path_array), new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));














  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();

















  }
  public void outsource() {

    // ********************* Channel Opening ********************** 

    UnsignedInteger[] SHA_H_Checkpoint_32 = xjsnark.util_and_sha.Util.convert_8_to_32(SHA_H_Checkpoint);

    values = TLSKeySchedule.get1RTT_HS_new(HS, H2, CH_SH_len.copy(16), ServExt_len.copy(16), ServExt_tail_ct, ServExt_tail_len.copy(8), SHA_H_Checkpoint_32, dns_ct);

    UnsignedInteger[] dns_query_bytes = values[0];

    // The dns query is of the format: "7example3com" 
    // from which we extract just ".example.com" 
    // and the length of the question, which is 12 in the example above 
    UnsignedInteger[][] extraction_values = LabelExtraction.extractDoTReverse(dns_query_bytes);
    UnsignedInteger[] dns_labels = extraction_values[0];

    // This tests the membership in the merkle tree 
    UnsignedInteger a = new UnsignedInteger(1, new BigInteger("0"));
    a.assign(non_membership.check_wildcard_python_path(dns_labels, root.copy(), left_domain_name, right_domain_name, left_index.copy(8), right_index.copy(8), left_path_array, right_path_array, left_dir.copy(64), right_dir.copy(64)), 1);

  }
  public String get_tail_minus_36(String line) {

    String output = "";

    int len = (line.length() / 2);

    int num_whole_blocks = (len - 36) / 64;

    int tail_len = len - num_whole_blocks * 64;

    for (int i = 0; i < tail_len; i++) {
      int j = num_whole_blocks * 64 + i;
      output = output + line.substring(2 * j, 2 * j + 2);
    }

    return output;
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
