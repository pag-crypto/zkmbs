package xjsnark.e2eDNS;

/*Generated by MPS */

import backend.auxTypes.SmartMemory;
import backend.auxTypes.UnsignedInteger;
import backend.structure.CircuitGenerator;
import backend.auxTypes.Bit;
import backend.auxTypes.ConditionalScopeTracker;
import java.math.BigInteger;

public class LabelExtraction {

  public static final int[] b64url_encoding_table_int = {65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95};


  // This table returns the 8-bit ASCII value encoded by the given base64 character
  // where the base64 character is itself an 8-bit ASCII value
  // The first 43 characters are junk values that are never used. Setting them to 0 causes an error in xJsnark's optimizer,
  // so we just used random junk values instead.
  public static final int[] base64_decode_table = {0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x11, 62, 0, 0, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 0, 0, 0, 0};


  public static SmartMemory<UnsignedInteger> b64_decode_ram;

  // ASCII representations of the strings "POST" and "GET "
  public static final int[] first_four_post_ints = {80, 79, 83, 84};
  public static final int[] first_four_get_bytes_int = {71, 69, 84, 32};

  // ASCII for carriage return and line feed characters
  public static final int cr_int = 13;
  public static final int lf_int = 10;

  // The assumed maximum length of the HTTP mesages in ASCII (and the corresponding base64 size)
  public static final int HTTP_REQUEST_MAX_LENGTH = 500;
  public static final int DNS_QUERY_MAX_LENGTH = 255;
  public static final int DNS_QUERY_MAX_B64_LENGTH = 344;


  // This function takes an input DNS question that is serialized in the form "7example3com"
  // and returns ".example.com"
  // The function is more powerful and could be modified to return the lables separately
  // but it is sufficient to return the concatenated string for the DNS application.
  // The length is returned as it is used in reversing the string.

  // offset - the byte index of the start of the question within the input dns_message
  public static UnsignedInteger[][] deserializeQuestion(UnsignedInteger[] dns_message, int offset) {
    UnsignedInteger skip_index = UnsignedInteger.instantiateFrom(8, offset).copy(8);

    UnsignedInteger[] all_labels = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{255}, 8);

    // We keep track of the  
    UnsignedInteger true_length = UnsignedInteger.instantiateFrom(8, 0).copy(8);

    // To circumvent an error we encountered with xJsnark, 
    // we use this variable to avoid having a third nested if loop 
    UnsignedInteger keep_reading = UnsignedInteger.instantiateFrom(1, 1).copy(1);

    for (int i = 0; i + offset < 255; i++) {
      {
        Bit bit_a0l0ib = UnsignedInteger.instantiateFrom(8, i + offset).isNotEqualTo(skip_index).copy();
        boolean c_a0l0ib = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0l0ib);
        if (c_a0l0ib) {
          if (bit_a0l0ib.getConstantValue()) {
            // keep_reading will either be 1 or 0 
            // So either the recorded value will be the array element or 0. 
            all_labels[i].assign(dns_message[i + offset].mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
          } else {
            {
              Bit bit_a0a0a0a2a0a11a43 = dns_message[i + offset].isNotEqualTo(UnsignedInteger.instantiateFrom(8, 0)).copy();
              boolean c_a0a0a0a2a0a11a43 = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0a0a2a0a11a43);
              if (c_a0a0a0a2a0a11a43) {
                if (bit_a0a0a0a2a0a11a43.getConstantValue()) {
                  true_length.assign(true_length.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                  skip_index.assign(skip_index.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                  all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
                } else {
                  keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);

                }
              } else {
                ConditionalScopeTracker.pushMain();
                ConditionalScopeTracker.push(bit_a0a0a0a2a0a11a43);
                true_length.assign(true_length.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                skip_index.assign(skip_index.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

                ConditionalScopeTracker.pop();

                ConditionalScopeTracker.push(new Bit(true));

                keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);
                ConditionalScopeTracker.pop();
                ConditionalScopeTracker.popMain();
              }

            }

          }
        } else {
          ConditionalScopeTracker.pushMain();
          ConditionalScopeTracker.push(bit_a0l0ib);
          // keep_reading will either be 1 or 0 
          // So either the recorded value will be the array element or 0. 
          all_labels[i].assign(dns_message[i + offset].mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

          ConditionalScopeTracker.pop();

          ConditionalScopeTracker.push(new Bit(true));

          {
            Bit bit_a0a0a11a43_0 = dns_message[i + offset].isNotEqualTo(UnsignedInteger.instantiateFrom(8, 0)).copy();
            boolean c_a0a0a11a43_0 = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0a11a43_0);
            if (c_a0a0a11a43_0) {
              if (bit_a0a0a11a43_0.getConstantValue()) {
                true_length.assign(true_length.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                skip_index.assign(skip_index.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
              } else {
                keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);

              }
            } else {
              ConditionalScopeTracker.pushMain();
              ConditionalScopeTracker.push(bit_a0a0a11a43_0);
              true_length.assign(true_length.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
              skip_index.assign(skip_index.add(dns_message[i + offset]).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
              all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

              ConditionalScopeTracker.pop();

              ConditionalScopeTracker.push(new Bit(true));

              keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);
              ConditionalScopeTracker.pop();
              ConditionalScopeTracker.popMain();
            }

          }
          ConditionalScopeTracker.pop();
          ConditionalScopeTracker.popMain();
        }

      }
    }

    return new UnsignedInteger[][]{all_labels, new UnsignedInteger[]{true_length.copy(8)}};
  }


  // Same as the above function but with a variable offset (given as uint_8) type input
  public static UnsignedInteger[][] deserializeQuestion(UnsignedInteger[] dns_message, UnsignedInteger offset) {

    SmartMemory<UnsignedInteger> dns_message_ram = new SmartMemory(dns_message, UnsignedInteger.__getClassRef(), new Object[]{"8"});

    UnsignedInteger skip_index = UnsignedInteger.instantiateFrom(8, offset).copy(8);

    UnsignedInteger[] all_labels = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{255}, 8);

    UnsignedInteger true_length = UnsignedInteger.instantiateFrom(8, 0).copy(8);

    UnsignedInteger keep_reading = UnsignedInteger.instantiateFrom(1, 1).copy(1);


    for (int i = 0; i < 255; i++) {
      {
        Bit bit_a0m0mb = UnsignedInteger.instantiateFrom(8, i).add(offset).isNotEqualTo(skip_index).copy();
        boolean c_a0m0mb = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0m0mb);
        if (c_a0m0mb) {
          if (bit_a0m0mb.getConstantValue()) {
            all_labels[i].assign(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
          } else {
            {
              Bit bit_a0a0a0a2a0a21a83 = dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)).isNotEqualTo(UnsignedInteger.instantiateFrom(8, 0)).copy();
              boolean c_a0a0a0a2a0a21a83 = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0a0a2a0a21a83);
              if (c_a0a0a0a2a0a21a83) {
                if (bit_a0a0a0a2a0a21a83.getConstantValue()) {
                  true_length.assign(true_length.add(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                  skip_index.assign(skip_index.add(dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                  all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
                } else {
                  keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);

                }
              } else {
                ConditionalScopeTracker.pushMain();
                ConditionalScopeTracker.push(bit_a0a0a0a2a0a21a83);
                true_length.assign(true_length.add(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                skip_index.assign(skip_index.add(dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

                ConditionalScopeTracker.pop();

                ConditionalScopeTracker.push(new Bit(true));

                keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);
                ConditionalScopeTracker.pop();
                ConditionalScopeTracker.popMain();
              }

            }

          }
        } else {
          ConditionalScopeTracker.pushMain();
          ConditionalScopeTracker.push(bit_a0m0mb);
          all_labels[i].assign(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

          ConditionalScopeTracker.pop();

          ConditionalScopeTracker.push(new Bit(true));

          {
            Bit bit_a0a0a21a83_0 = dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)).isNotEqualTo(UnsignedInteger.instantiateFrom(8, 0)).copy();
            boolean c_a0a0a21a83_0 = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0a21a83_0);
            if (c_a0a0a21a83_0) {
              if (bit_a0a0a21a83_0.getConstantValue()) {
                true_length.assign(true_length.add(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                skip_index.assign(skip_index.add(dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
                all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);
              } else {
                keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);

              }
            } else {
              ConditionalScopeTracker.pushMain();
              ConditionalScopeTracker.push(bit_a0a0a21a83_0);
              true_length.assign(true_length.add(UnsignedInteger.instantiateFrom(8, dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset)))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
              skip_index.assign(skip_index.add(dns_message_ram.read(UnsignedInteger.instantiateFrom(8, i).add(offset))).add(UnsignedInteger.instantiateFrom(8, 1)), 8);
              all_labels[i].assign(UnsignedInteger.instantiateFrom(8, 46).mul(UnsignedInteger.instantiateFrom(8, keep_reading)), 8);

              ConditionalScopeTracker.pop();

              ConditionalScopeTracker.push(new Bit(true));

              keep_reading.assign(UnsignedInteger.instantiateFrom(1, 0), 1);
              ConditionalScopeTracker.pop();
              ConditionalScopeTracker.popMain();
            }

          }
          ConditionalScopeTracker.pop();
          ConditionalScopeTracker.popMain();
        }

      }
    }

    return new UnsignedInteger[][]{all_labels, new UnsignedInteger[]{true_length.copy(8)}};
  }


  // This takes a DoT application data message
  // and returns the deserialized URL that was queried: ".example.com"
  public static UnsignedInteger[][] extractDoT(UnsignedInteger[] dns_message) {

    return deserializeQuestion(dns_message, 14);

  }

  // This is the above function but also reverses the URL: "moc.elpmaxe."
  public static UnsignedInteger[][] extractDoTReverse(UnsignedInteger[] dns_message) {

    UnsignedInteger[][] return_values = extractDoT(dns_message);

    UnsignedInteger[] all_labels = return_values[0];
    UnsignedInteger true_length = return_values[1][0].copy(8);

    UnsignedInteger[] reverse_label = reverse(all_labels, true_length.copy(8));

    return new UnsignedInteger[][]{reverse_label, new UnsignedInteger[]{true_length.copy(8)}};
  }


  // This verifies that the HTTP message starts with "POST" or "GET " 
  private static void check_method(SmartMemory<UnsignedInteger> http_bytes_ram, UnsignedInteger[] first_four_bytes) {
    for (int i = 0; i < 4; i++) {
      http_bytes_ram.read(i).forceEqual(first_four_bytes[i]);
    }
  }

  // Checks that the sequence CR || LF || CR || LF is present at the given index.
  private static void check_crlf_index(SmartMemory<UnsignedInteger> http_bytes_ram, UnsignedInteger crlf_index) {

    UnsignedInteger cr = UnsignedInteger.instantiateFrom(8, 13).copy(8);
    UnsignedInteger lf = UnsignedInteger.instantiateFrom(8, 10).copy(8);

    http_bytes_ram.read(crlf_index).forceEqual(cr);
    http_bytes_ram.read(crlf_index.add(UnsignedInteger.instantiateFrom(16, 1))).forceEqual(lf);
    http_bytes_ram.read(crlf_index.add(UnsignedInteger.instantiateFrom(16, 2))).forceEqual(cr);
    http_bytes_ram.read(crlf_index.add(UnsignedInteger.instantiateFrom(16, 3))).forceEqual(lf);
  }


  // This takes a DoH POST application data message
  // and returns the deserialized URL that was queried: ".example.com"
  public static UnsignedInteger[][] extractDoHPOST(UnsignedInteger[] http_bytes, UnsignedInteger crlf_index) {

    SmartMemory<UnsignedInteger> http_bytes_ram = new SmartMemory(http_bytes, UnsignedInteger.__getClassRef(), new Object[]{"8"});
    UnsignedInteger[] first_four_post = UnsignedInteger.instantiateFrom(8, first_four_post_ints);


    check_method(http_bytes_ram, first_four_post);

    check_crlf_index(http_bytes_ram, crlf_index.copy(16));


    UnsignedInteger[][] return_values = deserializeQuestion(http_bytes, crlf_index.add(UnsignedInteger.instantiateFrom(8, 16)).copy(8));

    return return_values;
  }

  // This is the above function but also reverses the URL: "moc.elpmaxe."
  public static UnsignedInteger[][] extractDoHPOSTReverse(UnsignedInteger[] http_bytes, UnsignedInteger crlf_index) {

    UnsignedInteger[][] return_values = extractDoHPOST(http_bytes, crlf_index.copy(8));

    UnsignedInteger[] all_labels = return_values[0];
    UnsignedInteger true_length = return_values[1][0].copy(8);

    UnsignedInteger[] reverse_label = reverse(all_labels, true_length.copy(8));

    return new UnsignedInteger[][]{reverse_label, new UnsignedInteger[]{true_length.copy(8)}};
  }


  // Maps a base64 character to the ASCII value 
  public static UnsignedInteger decode_base64_character(UnsignedInteger ch) {
    UnsignedInteger output = new UnsignedInteger(8, new BigInteger("0"));

    output.assign(UnsignedInteger.instantiateFrom(8, b64_decode_ram.read(UnsignedInteger.instantiateFrom(8, ch))), 8);

    return output;
  }

  // Given four base64 characters,
  // this function returns the three ASCII characters they encode.
  public static UnsignedInteger[] convert_one_base64_block(UnsignedInteger[] input) {

    UnsignedInteger one_block = UnsignedInteger.instantiateFrom(24, 0).copy(24);

    UnsignedInteger converted_value = new UnsignedInteger(8, new BigInteger("0"));

    for (int j = 0; j < 4; j++) {
      converted_value.assign(decode_base64_character(input[j].copy(8)), 8);
      one_block.assign(one_block.orBitwise((UnsignedInteger.instantiateFrom(24, converted_value).shiftLeft((6 * (3 - j))))), 24);
    }

    UnsignedInteger[] output = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{3}, 8);

    for (int i = 0; i < 3; i++) {
      output[i].assign(UnsignedInteger.instantiateFrom(8, one_block.shiftRight((8 * (2 - i)))), 8);
    }

    return output;
  }

  // Given a base64 string
  // this function returns the ASCII string encoded by it.
  public static UnsignedInteger[] convert_base64_to_ascii(UnsignedInteger[] input, UnsignedInteger length) {

    UnsignedInteger[] output = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{258}, 8);

    UnsignedInteger[] four_bytes = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{4}, 8);
    UnsignedInteger[] block = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{3}, 8);

    for (int i = 0; i < 86; i++) {
      // take 4 bytes and convert each via the table from b64 to ascii 
      for (int j = 0; j < 4; j++) {
        four_bytes[j].assign(input[i * 4 + j], 8);
      }

      block = convert_one_base64_block(four_bytes);

      for (int k = 0; k < 3; k++) {
        output[i * 3 + k].assign(block[k], 8);
      }
    }

    return output;
  }


  // This takes a DoH GET application data message
  // and returns the deserialized URL that was queried: ".example.com"
  public static UnsignedInteger[][] extractDoHGET(UnsignedInteger[] http_bytes) {

    SmartMemory<UnsignedInteger> http_bytes_ram = new SmartMemory(http_bytes, UnsignedInteger.__getClassRef(), new Object[]{"8"});

    b64_decode_ram = new SmartMemory(UnsignedInteger.instantiateFrom(8, base64_decode_table), UnsignedInteger.__getClassRef(), new Object[]{"8"});


    // first verify that the query is a post 
    UnsignedInteger[] first_four_get = UnsignedInteger.instantiateFrom(8, first_four_get_bytes_int);
    check_method(http_bytes_ram, first_four_get);

    // we will skip the first   
    UnsignedInteger[] wire_format_base64 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{DNS_QUERY_MAX_B64_LENGTH}, 8);

    UnsignedInteger seen_space = UnsignedInteger.instantiateFrom(1, 0).copy(1);
    UnsignedInteger wf_length = UnsignedInteger.instantiateFrom(16, 0).copy(16);
    for (int i = 0; i < DNS_QUERY_MAX_B64_LENGTH; i++) {
      {
        Bit bit_a0p0ad = seen_space.isEqualTo(UnsignedInteger.instantiateFrom(1, 0)).copy();
        boolean c_a0p0ad = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0p0ad);
        if (c_a0p0ad) {
          if (bit_a0p0ad.getConstantValue()) {
            {
              Bit bit_a0a0a2a0a51a87 = http_bytes[i + 19].isNotEqualTo(UnsignedInteger.instantiateFrom(8, 32)).copy();
              boolean c_a0a0a2a0a51a87 = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0a2a0a51a87);
              if (c_a0a0a2a0a51a87) {
                if (bit_a0a0a2a0a51a87.getConstantValue()) {
                  wire_format_base64[i].assign(http_bytes[i + 19], 8);
                  wf_length.assign(wf_length.add(UnsignedInteger.instantiateFrom(16, 1)), 16);
                } else {
                  seen_space.assign(UnsignedInteger.instantiateFrom(1, 1), 1);

                }
              } else {
                ConditionalScopeTracker.pushMain();
                ConditionalScopeTracker.push(bit_a0a0a2a0a51a87);
                wire_format_base64[i].assign(http_bytes[i + 19], 8);
                wf_length.assign(wf_length.add(UnsignedInteger.instantiateFrom(16, 1)), 16);

                ConditionalScopeTracker.pop();

                ConditionalScopeTracker.push(new Bit(true));

                seen_space.assign(UnsignedInteger.instantiateFrom(1, 1), 1);
                ConditionalScopeTracker.pop();
                ConditionalScopeTracker.popMain();
              }

            }
          } else {
            wire_format_base64[i].assign(UnsignedInteger.instantiateFrom(8, 0), 8);

          }
        } else {
          ConditionalScopeTracker.pushMain();
          ConditionalScopeTracker.push(bit_a0p0ad);
          {
            Bit bit_a0a0p0ad = http_bytes[i + 19].isNotEqualTo(UnsignedInteger.instantiateFrom(8, 32)).copy();
            boolean c_a0a0p0ad = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0a0p0ad);
            if (c_a0a0p0ad) {
              if (bit_a0a0p0ad.getConstantValue()) {
                wire_format_base64[i].assign(http_bytes[i + 19], 8);
                wf_length.assign(wf_length.add(UnsignedInteger.instantiateFrom(16, 1)), 16);
              } else {
                seen_space.assign(UnsignedInteger.instantiateFrom(1, 1), 1);

              }
            } else {
              ConditionalScopeTracker.pushMain();
              ConditionalScopeTracker.push(bit_a0a0p0ad);
              wire_format_base64[i].assign(http_bytes[i + 19], 8);
              wf_length.assign(wf_length.add(UnsignedInteger.instantiateFrom(16, 1)), 16);

              ConditionalScopeTracker.pop();

              ConditionalScopeTracker.push(new Bit(true));

              seen_space.assign(UnsignedInteger.instantiateFrom(1, 1), 1);
              ConditionalScopeTracker.pop();
              ConditionalScopeTracker.popMain();
            }

          }

          ConditionalScopeTracker.pop();

          ConditionalScopeTracker.push(new Bit(true));

          wire_format_base64[i].assign(UnsignedInteger.instantiateFrom(8, 0), 8);
          ConditionalScopeTracker.pop();
          ConditionalScopeTracker.popMain();
        }

      }
    }

    UnsignedInteger[] converted;
    converted = convert_base64_to_ascii(wire_format_base64, wf_length.copy(16));

    UnsignedInteger[][] return_values = deserializeQuestion(converted, 12);
    UnsignedInteger[] all_labels = return_values[0];
    UnsignedInteger true_length = return_values[1][0].copy(8);


    return new UnsignedInteger[][]{all_labels, return_values[1]};
  }

  // This is the above function but also reverses the URL: "moc.elpmaxe."
  public static UnsignedInteger[][] extractDoHGETReverse(UnsignedInteger[] http_bytes) {


    UnsignedInteger[][] return_values = extractDoHGET(http_bytes);

    UnsignedInteger[] all_labels = return_values[0];
    UnsignedInteger true_length = return_values[1][0].copy(8);


    UnsignedInteger[] reverse_label = reverse(all_labels, true_length.copy(8));


    return new UnsignedInteger[][]{reverse_label, new UnsignedInteger[]{true_length.copy(8)}};
  }

  // Function to reverse a given string
  // The input is padded with 0s to reach a fixed length
  // so the actual length to be reversed is given as input.
  public static UnsignedInteger[] reverse(UnsignedInteger[] input, UnsignedInteger rev_length) {

    SmartMemory<UnsignedInteger> input_ram = new SmartMemory(input, UnsignedInteger.__getClassRef(), new Object[]{"8"});
    UnsignedInteger[] output = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{input.length}, 8);

    for (int i = 0; i < input.length; i++) {
      {
        Bit bit_a0e0id = UnsignedInteger.instantiateFrom(8, i).isLessThan(rev_length).copy();
        boolean c_a0e0id = CircuitGenerator.__getActiveCircuitGenerator().__checkConstantState(bit_a0e0id);
        if (c_a0e0id) {
          if (bit_a0e0id.getConstantValue()) {
            output[i].assign(input_ram.read(UnsignedInteger.instantiateFrom(8, rev_length.subtract(UnsignedInteger.instantiateFrom(8, i)).subtract(UnsignedInteger.instantiateFrom(8, 1)))), 8);
          } else {

          }
        } else {
          ConditionalScopeTracker.pushMain();
          ConditionalScopeTracker.push(bit_a0e0id);
          output[i].assign(input_ram.read(UnsignedInteger.instantiateFrom(8, rev_length.subtract(UnsignedInteger.instantiateFrom(8, i)).subtract(UnsignedInteger.instantiateFrom(8, 1)))), 8);

          ConditionalScopeTracker.pop();

          ConditionalScopeTracker.push(new Bit(true));

          ConditionalScopeTracker.pop();
          ConditionalScopeTracker.popMain();
        }

      }
    }

    return output;
  }

  // Concatenate two strings
  public static UnsignedInteger[] concat(UnsignedInteger[] a1, UnsignedInteger[] a2) {
    int l1 = a1.length;
    int l2 = a2.length;
    UnsignedInteger[] res = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{l1 + l2}, 8);

    for (int i = 0; i < l1; i++) {
      res[i].assign(a1[i], 8);
    }

    for (int i = 0; i < l2; i++) {
      res[i + l1].assign(a2[i], 8);
    }
    return res;

  }

}
