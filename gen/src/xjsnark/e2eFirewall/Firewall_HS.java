package xjsnark.e2eFirewall;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.config.Config;
import backend.eval.SampleRun;
import java.io.BufferedReader;
import java.io.FileReader;
import java.math.BigInteger;
import backend.auxTypes.UnsignedInteger;
import util.Util;
import xjsnark.tls13_key_schedules.TLSKeySchedule;
import backend.eval.CircuitEvaluator;

public class Firewall_HS extends CircuitGenerator {



  public static void main(String[] args) {
    Config.multivariateExpressionMinimization = false;
    Config.writeCircuits = true;
    Config.outputFilesPath = ".";
    new Firewall_HS();
  }

  public Firewall_HS() {
    super("Firewall_HS");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {

        // READ and PROCESS CIRCUIT INPUTS for Channel Opening 
        // This part is general channel opening and not specific to HTTP Firewall 
        // See channel_openings module for more information 

        // There are NO extra inputs for the HTTP Firewall application 

        try {
          BufferedReader br = new BufferedReader(new FileReader(input_file));

          String psk_line = br.readLine();
          String sk_line = br.readLine();
          String Ax_line = br.readLine();
          String Ay_line = br.readLine();
          String Bx_line = br.readLine();
          String By_line = br.readLine();
          String HS_line = br.readLine();
          String H2_line = br.readLine();
          String H7_line = br.readLine();
          String H3_line = br.readLine();
          String SF_line = br.readLine();
          String pt2_line = br.readLine();
          String ct3_line = br.readLine();
          String dns_ct_line = br.readLine();
          String H_state_tr7_line = br.readLine();

          for (int i = 0; i < HS_line.length() / 2; i = i + 1) {
            HS[i].mapValue(new BigInteger(HS_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < H2_line.length() / 2; i = i + 1) {
            H2[i].mapValue(new BigInteger(H2_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          pt2_len.mapValue(BigInteger.valueOf(pt2_line.length() / 2), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          ct3_len.mapValue(BigInteger.valueOf((ct3_line.length() / 2)), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          String ct3_tail_str = get_tail_minus_36(pt2_line + ct3_line);

          for (int i = 0; i < ct3_tail_str.length() / 2; i = i + 1) {
            ct3_tail[i].mapValue(new BigInteger(ct3_tail_str.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          ct3_tail_len.mapValue(BigInteger.valueOf(ct3_tail_str.length() / 2), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());

          for (int i = ct3_tail_str.length() / 2; i < 128; i = i + 1) {
            ct3_tail[i].mapValue(new BigInteger("0"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < H_state_tr7_line.length() / 2; i = i + 1) {
            H_state_tr7[i].mapValue(new BigInteger(H_state_tr7_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

          for (int i = 0; i < dns_ct_line.length() / 2; i = i + 1) {
            http_msg_ciphertext[i].mapValue(new BigInteger(dns_ct_line.substring(2 * i, 2 * i + 2), 16), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }
          for (int i = dns_ct_line.length() / 2; i < HTTPFirewall.HTTP_REQUEST_MAX_LENGTH; i = i + 1) {
            http_msg_ciphertext[i].mapValue(new BigInteger("0"), CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          }

        } catch (Exception ex) {
          System.out.println("FILE NOT FIND OR LINE NOT READ");
        }

        // END OF CHANNEL OPENING INPUTS //////////////////////////////////////////////////////////////////////////// 

        // There are no separate inputs for HTTP Firewall 
      }
      public void post() {
        System.out.println("HTTP Firewall Circuit Output: Proof Generated \n");
        System.out.print(String.format(" The first CRLF was found at index: " + first_crlf_index.getValueFromEvaluator(CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator()).toString(10)));
        System.out.print("\n");

      }

    });

  }



  public void __init() {
    input_file = "test_doh.txt";
    first_crlf_index = new UnsignedInteger(8, new BigInteger("0"));
    HS = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    H_state_tr7 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    H2 = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{32}, 8);
    pt2_len = new UnsignedInteger(16, new BigInteger("0"));
    ct3_len = new UnsignedInteger(16, new BigInteger("0"));
    ct3_tail = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{128}, 8);
    ct3_tail_len = new UnsignedInteger(8, new BigInteger("0"));
    http_msg_ciphertext = (UnsignedInteger[]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{HTTPFirewall.HTTP_REQUEST_MAX_LENGTH}, 8);
  }

  public String input_file;
  public UnsignedInteger[][] values;
  public UnsignedInteger first_crlf_index;
  public UnsignedInteger[] HS;
  public UnsignedInteger[] H_state_tr7;
  public UnsignedInteger[] H2;
  public UnsignedInteger pt2_len;
  public UnsignedInteger ct3_len;
  public UnsignedInteger[] ct3_tail;
  public UnsignedInteger ct3_tail_len;
  public UnsignedInteger[] http_msg_ciphertext;

  @Override
  public void __defineInputs() {
    super.__defineInputs();
    pt2_len = UnsignedInteger.createInput(this, 16);
    ct3_len = UnsignedInteger.createInput(this, 16);
    ct3_tail_len = UnsignedInteger.createInput(this, 8);



    H2 = (UnsignedInteger[]) UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(H2), 8);
    ct3_tail = (UnsignedInteger[]) UnsignedInteger.createInputArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(ct3_tail), 8);












  }
  @Override
  public void __defineOutputs() {
    super.__defineOutputs();









  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();




    HS = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(HS), 8);
    H_state_tr7 = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(H_state_tr7), 8);
    http_msg_ciphertext = (UnsignedInteger[]) UnsignedInteger.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(http_msg_ciphertext), 8);















  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();

















  }
  public void outsource() {

    // (1) Channel Opening:  values[0] should be the plaintext 
    UnsignedInteger[] H_state_tr7_32 = xjsnark.util_and_sha.Util.convert_8_to_32(H_state_tr7);
    values = TLSKeySchedule.get1RTT_HS_new(HS, H2, pt2_len.copy(16), ct3_len.copy(16), ct3_tail, ct3_tail_len.copy(8), H_state_tr7_32, http_msg_ciphertext);

    UnsignedInteger[] http_msg = values[0];

    // The following function call achieves the following: 
    // (2): Parse and Extract - find the first CRLF index in the http message 
    // (3): Policy Check - verify that the string 'HTTP/1.1' is present before the first CRLF 
    // We return the found index for logging. 
    first_crlf_index.assign(HTTPFirewall.test_firewall(http_msg), 8);
  }
  public String get_tail_minus_36(String line) {

    String output = "";

    int len = (line.length() / 2);

    int num_whole_blocks = (len - 36) / 64;

    int tail_len = len - num_whole_blocks * 64;

    for (int i = 0; i < tail_len; i++) {
      int j = num_whole_blocks * 64 + i;
      output = output + line.substring(2 * j, 2 * j + 2);
    }

    return output;
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
